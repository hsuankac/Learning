std	C:\Users\hsuankai.chang\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^namespace std { template<typename _Tp> class shared_ptr {$/;"	namespace	line:1
shared_ptr	C:\Users\hsuankai.chang\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^namespace std { template<typename _Tp> class shared_ptr { $/;"	class	line:1	namespace:std
operator ->	C:\Users\hsuankai.chang\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    _Tp* operator->();$/;"	prototype	line:2	class:std::shared_ptr	access:private	signature:()	returns:_Tp 
reset	C:\Users\hsuankai.chang\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    void reset( Y* ptr );$/;"	prototype	line:3	class:std::shared_ptr	access:private	signature:( Y* ptr )	returns:void 
reset	C:\Users\hsuankai.chang\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    void reset( Y* ptr, Deleter d );$/;"	prototype	line:4	class:std::shared_ptr	access:private	signature:( Y* ptr, Deleter d )	returns:void 
reset	C:\Users\hsuankai.chang\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    void reset( Y* ptr, Deleter d, Alloc alloc );$/;"	prototype	line:5	class:std::shared_ptr	access:private	signature:( Y* ptr, Deleter d, Alloc alloc )	returns:void 
get	C:\Users\hsuankai.chang\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    _T* get() const;$/;"	prototype	line:6	class:std::shared_ptr	access:private	signature:() const	returns:_T 
Savings_Account	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.cpp	/^Savings_Account::Savings_Account(std::string name, double balance, double int_rate)$/;"	function	line:3	class:Savings_Account	signature:(std::string name, double balance, double int_rate)	returns:Savings_Account :: 
deposit	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.cpp	/^bool Savings_Account::deposit(double amount) {$/;"	function	line:11	class:Savings_Account	signature:(double amount)	returns:bool Savings_Account :: 
operator <<	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.cpp	/^std::ostream &operator<<(std::ostream &os, const Savings_Account &account) {$/;"	function	line:16	signature:(std::ostream &os, const Savings_Account &account)	returns:std :: ostream 
_ACCOUNT_H_	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^#define _ACCOUNT_H_$/;"	macro	line:3
Account	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^class Account {$/;"	class	line:7
operator <<	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^    friend std::ostream &operator<<(std::ostream &os, const Account &account);$/;"	prototype	line:8	class:Account	access:friend	signature:(std::ostream &os, const Account &account)	returns:friend std :: ostream 
def_name	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^    static constexpr const char *def_name = "Unnamed Account";$/;"	member	line:10	class:Account	access:private
def_balance	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^    static constexpr double def_balance = 0.0;$/;"	member	line:11	class:Account	access:private
name	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^    std::string name;$/;"	member	line:13	class:Account	access:protected
balance	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^    double balance;$/;"	member	line:14	class:Account	access:protected
Account	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^    Account(std::string name = def_name, double balance = def_balance);$/;"	prototype	line:16	class:Account	access:public	signature:(std::string name = def_name, double balance = def_balance)
deposit	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^    bool deposit(double amount);$/;"	prototype	line:18	class:Account	access:public	signature:(double amount)	returns:bool 
withdraw	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^    bool withdraw(double amount);$/;"	prototype	line:19	class:Account	access:public	signature:(double amount)	returns:bool 
get_balance	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.h	/^    double get_balance() const;$/;"	prototype	line:20	class:Account	access:public	signature:() const	returns:double 
_SAVINGS_ACCOUNT_H_	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.h	/^#define _SAVINGS_ACCOUNT_H_$/;"	macro	line:2
Savings_Account	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.h	/^class Savings_Account: public Account {$/;"	class	line:13	inherits:Account
operator <<	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.h	/^    friend std::ostream &operator<<(std::ostream &os, const Savings_Account &account);$/;"	prototype	line:14	class:Savings_Account	access:friend	signature:(std::ostream &os, const Savings_Account &account)	returns:friend std :: ostream 
def_name	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.h	/^    static constexpr const char *def_name = "Unnamed Savings Account";$/;"	member	line:16	class:Savings_Account	access:private
def_balance	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.h	/^    static constexpr double def_balance = 0.0;$/;"	member	line:17	class:Savings_Account	access:private
def_int_rate	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.h	/^    static constexpr double def_int_rate = 0.0;$/;"	member	line:18	class:Savings_Account	access:private
int_rate	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.h	/^    double int_rate;$/;"	member	line:20	class:Savings_Account	access:protected
Savings_Account	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.h	/^    Savings_Account(std::string name = def_name, double balance =def_balance, double int_rate = def_int_rate);    $/;"	prototype	line:22	class:Savings_Account	access:public	signature:(std::string name = def_name, double balance =def_balance, double int_rate = def_int_rate)
deposit	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Savings_Account.h	/^    bool deposit(double amount);$/;"	prototype	line:23	class:Savings_Account	access:public	signature:(double amount)	returns:bool 
_ACCOUNT_UTIL_H_	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.h	/^#define _ACCOUNT_UTIL_H_$/;"	macro	line:2
display	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.h	/^void display(const std::vector<Account> &accounts);$/;"	prototype	line:9	signature:(const std::vector<Account> &accounts)	returns:void 
deposit	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.h	/^void deposit(std::vector<Account> &accounts, double amount);$/;"	prototype	line:10	signature:(std::vector<Account> &accounts, double amount)	returns:void 
withdraw	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.h	/^void withdraw(std::vector<Account> &accounts, double amount);$/;"	prototype	line:11	signature:(std::vector<Account> &accounts, double amount)	returns:void 
display	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.h	/^void display(const std::vector<Savings_Account> &accounts);$/;"	prototype	line:15	signature:(const std::vector<Savings_Account> &accounts)	returns:void 
deposit	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.h	/^void deposit(std::vector<Savings_Account> &accounts, double amount);$/;"	prototype	line:16	signature:(std::vector<Savings_Account> &accounts, double amount)	returns:void 
withdraw	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.h	/^void withdraw(std::vector<Savings_Account> &accounts, double amount);$/;"	prototype	line:17	signature:(std::vector<Savings_Account> &accounts, double amount)	returns:void 
display	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.cpp	/^void display(const std::vector<Account> &accounts) {$/;"	function	line:5	signature:(const std::vector<Account> &accounts)	returns:void 
deposit	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.cpp	/^void deposit(std::vector<Account> &accounts, double amount) {$/;"	function	line:12	signature:(std::vector<Account> &accounts, double amount)	returns:void 
withdraw	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.cpp	/^void withdraw(std::vector<Account> &accounts, double amount) {$/;"	function	line:23	signature:(std::vector<Account> &accounts, double amount)	returns:void 
display	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.cpp	/^void display(const std::vector<Savings_Account> &accounts) {$/;"	function	line:37	signature:(const std::vector<Savings_Account> &accounts)	returns:void 
deposit	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.cpp	/^void deposit(std::vector<Savings_Account> &accounts, double amount) {$/;"	function	line:44	signature:(std::vector<Savings_Account> &accounts, double amount)	returns:void 
withdraw	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account_Util.cpp	/^void withdraw(std::vector<Savings_Account> &accounts, double amount) {$/;"	function	line:55	signature:(std::vector<Savings_Account> &accounts, double amount)	returns:void 
main	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\main.cpp	/^int main() {$/;"	function	line:10	signature:()	returns:int 
Account	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.cpp	/^Account::Account(std::string name, double balance) $/;"	function	line:3	class:Account	signature:(std::string name, double balance)	returns:Account :: 
deposit	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.cpp	/^bool Account::deposit(double amount) {$/;"	function	line:7	class:Account	signature:(double amount)	returns:bool Account :: 
withdraw	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.cpp	/^bool Account::withdraw(double amount) {$/;"	function	line:16	class:Account	signature:(double amount)	returns:bool Account :: 
get_balance	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.cpp	/^double Account::get_balance() const {$/;"	function	line:24	class:Account	signature:() const	returns:double Account :: 
operator <<	C:\learning\c++\FrankUdemy\kai\Section15\Challenge\Account.cpp	/^std::ostream &operator<<(std::ostream &os, const Account &account) {$/;"	function	line:28	signature:(std::ostream &os, const Account &account)	returns:std :: ostream 
